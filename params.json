{"name":"Aqt.Cassowary","tagline":"Use the Cassowary constraint solver in QML applications","body":"Aqt.Cassowary (pronounced like *Acute Cassowary*) is a Qt plugin that\r\nallows you to run a incremental linear constraint solver in QML\r\napplications, providing a declarative interface that fits naturally in\r\nthe QML programming model.\r\n\r\nIt is a wrapper around [Rhea](https://github.com/Nocte-/rhea), which\r\nis modern C++ implementation based on the original [Cassowary linear\r\nconstraint solver](http://constraints.cs.washington.edu/cassowary/).\r\n\r\n[![Build Status]\r\n  (https://travis-ci.org/AbletonAG/aqt-cassowary.svg?branch=master)]\r\n(https://travis-ci.org/AbletonAG/aqt-cassowary)\r\n\r\n### Incremental linear constraint what the heck...?\r\n\r\nA linear constraint solver allows you to specify the relationship\r\nbetween variables (constraints) without necessarily giving them\r\nspecific values.  The system can then automatically find values for\r\nthese variables that satisfy all the specified relationships. It is\r\nincremental, because the constraints can change and the system reuses\r\nprevious solutions to provide stable results fast.\r\n\r\nCassowary is most useful for writing layout code for responsive\r\napplications with very dynamic content.  It is the tool you need when\r\n`anchors` or `QtQuick.Layouts` are too rigid for you.  Check the\r\nexamples in `examples` for more details.\r\n\r\nStatus\r\n------\r\n\r\nThe library is currently under heavy active development.  The API is\r\nnot stable yet.  Use at your own risk.\r\n\r\nDocumentation\r\n-------------\r\n\r\nReference documentation can be generated by executing in the project\r\ndirectory: `doxygen doc/doxygen.config`\r\n\r\nRequirements\r\n------------\r\n\r\nDependencies:\r\n  - Qt (>= 5.3)\r\n  - Boost (>= 1.54)\r\n  - CMake (>= 2.8.12)\r\n\r\nTest dependencies:\r\n  - GoogleTest (https://chromium.googlesource.com/external/googletest.git)\r\n\r\n## Build and Test\r\n\r\n```\r\n  mkdir build\r\n  cd build\r\n  cmake ..\r\n  cmake --build .\r\n```\r\n\r\nThe unit tests can be executed with *ctest*:\r\n```\r\n  ctest -V\r\n```\r\n\r\nYou might set the following variables:\r\n- `Boost_INCLUDE_DIR` to the folder, where Boost headers are found\r\n\r\nIn case the CMake files shipped with Qt are not found, set the `CMAKE_PREFIX_PATH`\r\nto the Qt installation prefix. See the\r\n[Qt5 CMake manual](http://qt-project.org/doc/qt-5/cmake-manual.html) for more.\r\n\r\nExample:\r\n```\r\n  cmake .. -DCMAKE_PREFIX_PATH=~/Qt/Qt5.3.1/clang_64 \\\r\n           -DBoost_INCLUDE_DIR=/opt/local/include/\r\n```\r\n\r\nLicense\r\n-------\r\n\r\nAqt.Casssowary is distributed under the MIT license (see LICENSE).\r\n\r\n> Copyright (c) 2014, 2015 Ableton AG, Berlin\r\n>\r\n> Permission is hereby granted, free of charge, to any person obtaining a copy\r\n> of this software and associated documentation files (the \"Software\"), to deal\r\n> in the Software without restriction, including without limitation the rights\r\n> to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n> copies of the Software, and to permit persons to whom the Software is\r\n> furnished to do so, subject to the following conditions:\r\n>\r\n> The above copyright notice and this permission notice shall be included in\r\n> all copies or substantial portions of the Software.\r\n>\r\n> THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n> IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n> FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n> AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n> LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n> OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n> THE SOFTWARE.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}